/*
 * Final Project - Embedded Systems
 * Claudio Demaria - s5433737
 * Gianluca Galvagni - s5521188
 */
#include "xc.h"
#include "math.h"
#include "stdio.h"
#include "stdlib.h"
#include "stdbool.h"

#define FOSC 144000000.0 //Hz Clock breadboard
#define REG_SXT_BIT 65535.0 // MAX 16 bit register
#define TIMER1 1
#define TIMER2 2
#define TIMER3 3
#define TIMER4 4
#define TIMER5 5
#define STATE_WAIT 0
#define STATE_MOTION 1
/*
 * SIZE BUFFER DECISION:
 * We choose a bound rate of 28800bps, which means that we can send approximately 2880 bytes per second.
 * The control loop must be executed at 1KHz, so the period is 1ms. 
 * This means that we can send/receive 2.88 bytes per control loop. 
 * -> RECEIVE BUFFER: 7 bytes 
 * Our choice is to clear the buffer at each control loop, so we don't need a buffer a lot bigger than 3 bytes, because the maximum number of bytes that we can receive in one control loop is 3.
 * We decided to set the size of the buffer to 7 bytes for avoid the possible case in which we received 6 bytes in two control loops without pulling them from the circular buffer (it is possible
 * because we have the uart interrupt that triggers when the uart buffer is full).
 * -> TRANSMISSION BUFFER: 54 bytes
 * We have to send 3 messages, each one (at maximum) of 12, 13 and 25 bytes. So we need approximately 17ms (12+13+25)/2.88 = 17.01ms to send all the messages. 
 * This is possible because the frequency of two of the messages is 10Hz (100ms) and the frequency of the other one is 1Hz (1s).
 * We decided to set the size of the buffer to 54 bytes because we want to have a margin of error.
*/
#define SIZE_OF_BUFFER_RC 7
#define SIZE_OF_BUFFER_TR 54
#define STATE_DOLLAR  (1) 
#define STATE_TYPE    (2) 
#define STATE_PAYLOAD (3) 
#define NEW_MESSAGE (1) 
#define NO_MESSAGE (0) 
int mainState = STATE_WAIT; // 0 = wait, 1 = move
int counterBlink = 0;
int flagFrequency = 0;
// we decide to add the possibility to change the rotation of the motors (with the button E9)
#define CLOCKWISEROTATION 0
#define COUNTERCLOCKWISEROTATION 1
int rotationState = CLOCKWISEROTATION;

// CIRCULAR BUFFER
struct rc_circular_buffer {
    // Circular buffer for the reception
    char buffer[SIZE_OF_BUFFER_RC];               
    int bufferLength;                           // Different from the SIZE_OF_BUFFER_RC, it's 'writeIndex - readIndex', the number of bytes that we still have to read
    int readIndex;
    int writeIndex;
};

struct tr_circular_buffer {
    // Circular buffer for the transmission
    char buffer[SIZE_OF_BUFFER_TR];              
    int bufferLength;                           // Different from the SIZE_OF_BUFFER_TR, it's 'writeIndex - readIndex', the number of bytes that we still have to read
    int readIndex;
    int writeIndex;
};

typedef struct { 
	int state;
	char msg_type[6]; 
	char msg_payload[100];  
	int index_type;
	int index_payload;
} parser_state;

struct threshold_data {
    // Struct to store the threshold for the IR sensor
    int minth;
    int maxth;
};

volatile parser_state ps;
struct rc_circular_buffer cb_reception; 
struct tr_circular_buffer cb_transmission;               
struct threshold_data threshold;

// FUNCTION PROTOTYPES //
void bottoms_initialization();
void leds_initialization();
void PWM_initialization();
void ADC_initialization();
void buffers_initialization();
void tmr_setup_period(int timer, int ms);
void tmr_wait_period (int timer);
void tmr_wait_ms(int timer, int ms);
void lights_off();
void lights_motion(float sg, float yr);
void stop_motion();
float threshold_calculation(int x_cm);
int inverse_threshold_calculation(float threshold);
void motor_pwm(float y);
float acquisition_ADC();
void push(char receivedChar, bool bufferSelection);
void pull(bool bufferSelection);
int parse_byte(parser_state* ps, char byte);
int extract_integer(const char* str);
int next_value(const char* msg, int i);
void parse_pcth(const char* msg);
void __attribute__((__interrupt__, __auto_psv__)) _INT1Interrupt();
void __attribute__ ((__interrupt__, __auto_psv__)) _T1Interrupt();
void __attribute__ ((__interrupt__, __auto_psv__)) _T3Interrupt();
void __attribute__ ((__interrupt__, __auto_psv__)) _T4Interrupt();
void __attribute__((__interrupt__, __auto_psv__)) _U2RXInterrupt();
void __attribute__((__interrupt__, __auto_psv__)) _INT2Interrupt();
void __attribute__ ((__interrupt__, __auto_psv__)) _T5Interrupt();

// INITIALISATIONS FUNCTIONS //
void bottoms_initialization(){
    RPINR0bits.INT1R = 0x58 ; // Set pin RP24 as INT1 (button E8)
    RPINR1bits.INT2R = 0x59 ; // Set pin RP25 as INT2 (button E9)
    INTCON2bits.GIE = 1; // Enable global interrupt
    INTCON2bits.INT1EP = 1; // Set INT1 interrupt on falling edge
    INTCON2bits.INT2EP = 1; // Set INT2 interrupt on falling edge
    TRISEbits.TRISE8 = 1; // Set pin RE8 as input
    TRISEbits.TRISE9 = 1; // Set pin RE9 as input   
    IFS1bits.INT1IF = 0; // Reset INT1 interrupt flag
    IFS1bits.INT2IF = 0; // Reset INT2 interrupt flag
    IEC1bits.INT1IE = 1; // Enable INT1 interrupt for button E8
    IEC1bits.INT2IE = 1; // Enable INT2 interrupt for button E9
    tmr_setup_period(TIMER1, 100); // set the timer to press the button E8 for 100ms and then stop the motion
    IEC0bits.T1IE = 1; // Enable Timer1 (T1IE) interrupt
    tmr_setup_period(TIMER5, 100); // set the timer to press the button E9 for 100ms and then change the rotation
    IEC1bits.T5IE = 1; // Enable Timer5 (T5IE) interrupt
}

void leds_initialization(){
    TRISAbits.TRISA0 = 0; // Set pin RA0 as output
    TRISGbits.TRISG9 = 0; // Set pin RG9 as output
    TRISBbits.TRISB8 = 0; // Set pin RB8 as output -> left side lights
    TRISFbits.TRISF1 = 0; // Set pin RF1 as output -> right side lights
    TRISFbits.TRISF0 = 0; // Set pin RF0 as output -> breaks lights
    TRISGbits.TRISG1 = 0; // Set pin RG1 as output -> low intensity lights
    TRISAbits.TRISA7 = 0; // Set pin RA7 as output -> beam lights
    lights_off(); 
}

void PWM_initialization(){
    // PWM Mode Configuration for OC1, OC2, OC3, and OC4
    OC1CON1bits.OCM = 6;
    OC2CON1bits.OCM = 6;
    OC3CON1bits.OCM = 6;
    OC4CON1bits.OCM = 6;
    // Synchronization Source Configuration for OC1, OC2, OC3, and OC4: use the peripheral clock
    OC1CON2bits.SYNCSEL = 0x1F;
    OC2CON2bits.SYNCSEL = 0x1F;
    OC3CON2bits.SYNCSEL = 0x1F;
    OC4CON2bits.SYNCSEL = 0x1F;
    // PWM Pin Configuration for OC1, OC2, OC3, and OC4
    RPOR0bits.RP65R = 0x010; // Set pin RP65 as OC1 (PWM)
    RPOR1bits.RP66R = 0x011; // Set pin RP66 as OC2 (PWM)
    RPOR1bits.RP67R = 0x012; // Set pin RP67 as OC3 (PWM)
    RPOR2bits.RP68R = 0x013; // Set pin RP68 as OC4 (PWM)
    PTCONbits.PTEN = 1; // Enable the PWM module
    // Set the PWM frequency to 10kHz for OC1, OC2, OC3, and OC4
    // OCxRS = Fosc / (2 * PWM Frequency * PTMR Prescaler) - 1
    OC1RS = 7199;
    OC2RS = 7199;
    OC3RS = 7199;
    OC4RS = 7199;
    stop_motion(); // Stop the motion
}

void ADC_initialization(){
    // set auto sample time bits
    AD1CON1bits.ASAM = 0; // Sampling begins when SAMP bit is set
    AD1CON1bits.SSRC = 7; // Internal counter ends sampling and starts conversion (auto-convert)
    AD1CON3bits.SAMC = 16; // Auto-sample time bits, how long the sampling time is (16*TAD = 3.6us)
    // set channel scan bits
    AD1CON2bits.CHPS = 0; // Converts CH0
    AD1CON1bits.SIMSAM = 0; // Samples multiple channels individually in sequence
    // IR sensor configuration AN14
    TRISBbits.TRISB14 = 1; // Set pin RB14 as input
    ANSELBbits.ANSB14 = 1; // Set pin RB14 as analog inputt
    // Battery sensor configuration AN11
    TRISBbits.TRISB11 = 1; // Set pin RB11 as input
    ANSELBbits.ANSB11 = 1; // Set pin RB11 as analog input
    // IR distance sensor enable line
    TRISBbits.TRISB9 = 0; // Set pin RB9 as output
    LATBbits.LATB9 = 1; // Set pin RB9 as HIGH
    // Scan configuration
    AD1CON2bits.CSCNA = 1; // Scan inputs
    AD1CSSLbits.CSS14 = 1; // Enable AN14 for scan
    AD1CSSLbits.CSS11 = 1; // Enable AN11 for scan
    AD1CON2bits.SMPI = 1; // Interrupts at the completion of conversion for each sample/convert sequence
    AD1CON3bits.ADCS = 14; // Select how long is the TAD, 14*Tcy = 14 * 1/72MHz = 194ns
    AD1CON1bits.ADON = 1; // Enable the ADC
}

void buffers_initialization(){
    cb_reception.bufferLength = 0;
    cb_reception.readIndex = 0;
    cb_reception.writeIndex = 0;
    cb_transmission.bufferLength = 0;
    cb_transmission.readIndex = 0;
    cb_transmission.writeIndex = 0;
}

// TIMER FUNCTIONS //
void tmr_setup_period(int timer, int ms){ 
    /*
    * Function to set the timer period based on the desired ms.
    * The formula to calculate the period is the following:
    * Fosc = 144000000 Hz -> Fcy = Fosc / 2 = 72000000 number of clocks in one second so in 0.1 secon there would be 7200000 clocks steps
    * this is too high to be put in a 16 bit register (max 65535) so we have to use a prescaler.
    * The max value of ms which doesn't overflow the register with the highest prescaler (256) is 65535*256/72000000 = 0.23s = 230ms
    */
    double Fcy = FOSC / 2.0;
    double clock_steps = Fcy * (ms/1000.0);
    int count = 0;
    if (clock_steps > REG_SXT_BIT){
        double prescaler_value[3] = {8.0,8.0,4.0};
        while(clock_steps > REG_SXT_BIT){
            clock_steps = clock_steps/prescaler_value[count];
            count +=1;           
        }
    }
    if (timer == TIMER1){
        TMR1 = 0.0; // Reset the timer
        PR1 = clock_steps; // Set the desired count value
        T1CONbits.TCKPS = count; // set PRESCALER
    }
    if (timer == TIMER2){
        TMR2 = 0.0;
        PR2 = clock_steps; 
        T2CONbits.TCKPS = count; 
    }
    if (timer == TIMER3){
        TMR3 = 0.0;
        PR3 = clock_steps; 
        T3CONbits.TCKPS = count; 
    }
    if (timer == TIMER4){
        TMR4 = 0.0;
        PR4 = clock_steps; 
        T4CONbits.TCKPS = count; 
    }
    if (timer == TIMER5){
        TMR5 = 0.0;
        PR5 = clock_steps; 
        T5CONbits.TCKPS = count; 
    }
}

void tmr_wait_period (int timer) {
    if (timer == TIMER1){
        while(IFS0bits.T1IF == 0){
        // Wait until the flag is high -> The timer finished to count
        }
    }
    if (timer == TIMER2){ 
      while(IFS0bits.T2IF == 0){
        // Wait until the flag is high -> The timer finished to count
        }  
    }
    if (timer == TIMER3){
      while(IFS0bits.T3IF == 0){
        // Wait until the flag is high -> The timer finished to count
        }  
    }
    if (timer == TIMER4){
      while(IFS1bits.T4IF == 0){
        // Wait until the flag is high -> The timer finished to count
        }  
    }
    if (timer == TIMER5){
      while(IFS1bits.T5IF == 0){
        // Wait until the flag is high -> The timer finished to count
        }  
    }
    
}

void tmr_wait_ms(int timer, int ms){
    tmr_setup_period(timer, ms);
    if (timer == TIMER1){
        IFS0bits.T1IF = 0; // Reset the flag
        T1CONbits.TON = 1; // Starts the timer
    }
    if (timer == TIMER2){ 
        IFS0bits.T2IF = 0; // Reset the flag
        T2CONbits.TON = 1; // Starts the timer
    }
    if (timer == TIMER3){
        IFS0bits.T3IF = 0; // Reset the flag
        T3CONbits.TON = 1; // Starts the timer
    }
    if (timer == TIMER4){
        IFS1bits.T4IF = 0; // Reset the flag
        T4CONbits.TON = 1; // Starts the timer
    }
    if (timer == TIMER5){
        IFS1bits.T5IF = 0; // Reset the flag
        T5CONbits.TON = 1; // Starts the timer
    }
    tmr_wait_period(timer);
}

// LIGHTS FUNCTIONS 
void lights_off(){
    LATAbits.LATA0 = 0; 
    LATGbits.LATG9 = 0; 
    LATBbits.LATB8 = 0; 
    LATFbits.LATF1 = 0; 
    LATFbits.LATF0 = 0; 
    LATGbits.LATG1 = 0; 
    LATAbits.LATA7 = 0;
}

void lights_motion(float sg, float yr){
    /*
    * Set the lights during the motion
    */
    if(sg >= 50.0){
        LATFbits.LATF0 = 0; 
        LATGbits.LATG1 = 0;
        LATAbits.LATA7 = 1; // beam lights on
    } else {
        LATFbits.LATF0 = 1; // breaks lights on
        LATGbits.LATG1 = 1; // low intensity lights on
        LATAbits.LATA7 = 0; 
    }

    if (yr > 15.0){
        // blink the left or the right side lights at 1Hz
        if (counterBlink == 0){
            T3CONbits.TON = 1;
        }
    }
    else {
        // stop the timer3
        T3CONbits.TON = 0;
        TMR3 = 0.0;
        counterBlink = 0;
        // turn off the left and right side lights
        LATBbits.LATB8 = 0; 
        LATFbits.LATF1 = 0; 
    }
}

// MOTION FUNCTIONS //
void stop_motion(){
    /*
    * Function to stop the motion of the motors
    */
    OC2R = 0;
    OC4R = 0;
    OC1R = 0;
    OC3R = 0;
}

float threshold_calculation(int x_cm){
    /*
    * Function to calculate the threshold for the IR sensor:
    * Based on our empirical measurements, we have found approximately the relation between the distance and the ADC value.
    * These are the values that we have found:
    * 0.6 = 38cm
    * 0.5 = 32cm
    * 0.4 = 26cm
    * 0.3 = 20cm
    * 0.2 = 15cm
    * 0.14 = 10cm
    * A function that in our opinion fits well these values is the following:
    * y = 0.016*x - 0.025  ->  where 'y' is the ADC value and 'x' is the distance in cm
    */
    return (float) ((0.016 * x_cm) - 0.025);
}

int inverse_threshold_calculation(float threshold){
    /*
    * Inverse of the function 'threshold_calculation' to calculate the 'real' distance from the ADC value
    */
    return (int) ((threshold + 0.025)/0.016);
}

void motor_pwm(float y){
    /*
    * Function to calculate the duty cycle for the motors based on the distance acquired from the ADC sensor
    * and the threshold calculated from the empirical data. The duty cycle is calculated as a percentage of the
    * maximum velocity (7199) and then it is applied to the PWM. The function returns the duty cycle for the motors.
    * The function also sets the lights based on the distance acquired from the ADC sensor. 
    * The maximum velocity is set to 60% of the maximum velocity (7199) because we want to have a margin of error.
    * The maxVelocityValue is set to 7199 because we want to have a period of 10kHz for the PWM.
    */
    int maxVelocityValue = 7199;        // 10kHz
    int maxVel = maxVelocityValue * 0.6; // 60% of the max velocity
    int minVel = maxVelocityValue * 0.4; // 40% of the max velocity
    int left_pwm1, right_pwm1, left_pwm2, right_pwm2; // Duty cycle for the motors
    float MIN = threshold_calculation(threshold.minth); // 15cm -> ~0.2
    float MAX = threshold_calculation(threshold.maxth); // 38cm -> ~0.6
    float sg, yr = 0.0; // Variables to set the lights based on the distance acquired from the ADC sensor
    // Check if the distance is in the desired range
    if (y < MIN){  
        if (rotationState == CLOCKWISEROTATION){ // Pure clockwise rotation
            sg = 0;  
            yr = 100;  
            left_pwm1 = maxVel;
            right_pwm1 = 0;
            left_pwm2 = 0;
            right_pwm2 = maxVel;
        }
        else if (rotationState == COUNTERCLOCKWISEROTATION){ // Pure counter clockwise rotation
            sg = 0;  
            yr = 100;  
            left_pwm1 = 0;
            right_pwm1 = maxVel;
            left_pwm2 = maxVel;
            right_pwm2 = 0;
        }       
        lights_motion(sg, yr); // Set the lights
    }
    else if (y > MAX){ // Move forward
        sg = 100;
        yr = 0;
        left_pwm1 = maxVel;
        right_pwm1 = maxVel;
        left_pwm2 = 0;
        right_pwm2 = 0;
        lights_motion(sg, yr); // Set the lights
    }
    else if (y <= MAX && y >= MIN){ 
        sg = (int) (100*(y-MIN)/(MAX-MIN)); 
        yr = (int) (100*(MAX-y)/(MAX-MIN)); 
        // Linear velocity decrease and dependant on the distance
        left_pwm1 = (int) (sg*minVel/100);  
        right_pwm1 = (int) (sg*minVel/100); 
        left_pwm2 = 0;
        right_pwm2 = 0;
        if (yr > 50){
            if (rotationState == CLOCKWISEROTATION){ // Turn right
                // Create an angolar velocity to turn right
                // Set the linear velocity to 50% of the before calculated value
                left_pwm1 = (int) (minVel*0.5);
                right_pwm1 = (int) (minVel*0.5);
                // Add the angolar velocity to turn right
                left_pwm1 = (int) (left_pwm1 + (yr-50)*minVel/100);
                right_pwm1 = (int) (right_pwm1 - (yr-50)*minVel/100);
            }
            else if (rotationState == COUNTERCLOCKWISEROTATION){ // Turn left
                // Create an angolar velocity to turn left
                // Set the linear velocity to 50% of the before calculated value
                left_pwm1 = (int) (minVel*0.5);
                right_pwm1 = (int) (minVel*0.5);
                // Add the angolar velocity to turn left
                left_pwm1 = (int) (left_pwm1 - (yr-50)*minVel/100);
                right_pwm1 = (int) (right_pwm1 + (yr-50)*minVel/100);
            }
        }       
        lights_motion(sg, yr); // Set the lights
    }
    else{ // If there is an error stop the motion and turn off the lights
        stop_motion();
        lights_off();
        return;
    }
    // Set the duty cycle for the motors
    OC2R  = left_pwm1;
    OC4R  = right_pwm1;
    OC1R  = left_pwm2;
    OC3R  = right_pwm2;
    return;
}

// ADC FUNCTIONS //
float acquisition_ADC(){
    /*
    * Function to acquire the data from the ADC sensor and calculate the distance 
    * The ADC is triggered to sample the data and when the conversion is done, the data are stored in the ADC1BUF1 and ADC1BUF0 registers. (We will use ADC1BUF0 to calculate the battery voltage)  
    */
    do {
        if (AD1CON1bits.SAMP == 0)                                  // If the ADC is not sampling
            AD1CON1bits.SAMP = 1;                                   // Start sampling again
    } while (!AD1CON1bits.DONE);                                    // Wait for the conversion to complete
        float V = (float) ADC1BUF1*(3.3 - 0)/1024;                      // Calculate the voltage of the sensor
        float y = 2.34 - (float) 4.74*V + (float) 4.06*pow(V,2) - (float) 1.60*pow(V,3) + (float) 0.24*pow(V,4);  // Use the formula given in the datasheet to calculate the distance  
        return y;
}

// SEND UART FUNCTIONS //
void send_battery_voltage(){
    // Function to send the battery voltage to the UART
    int size = 13;
    char message[size];
    float battery = (float) 3*ADC1BUF0*(3.3 - 0)/1024;
    sprintf(message, "$MBATT,%.2f*", battery);
    char ch = ' ';
    for (int i = 0; i < size && message[i] != '\0'; i++){ 
        ch = message[i];
        push(ch, false);
    }
}

void send_distance(int* cm_distance){
    // Function to send the distance to the UART
    int size = 12;
    char message[size];
    sprintf(message, "$MDIST,%d*",*cm_distance);
    char ch = ' ';
    for (int i = 0; i < size && message[i] != '\0'; i++){ 
        ch = message[i];
        push(ch, false);
    }
}

void send_duty_cycle(){
    // Function to send the duty cycle to the UART
    int size = 25;
    char message[size];
    sprintf(message, "$MDUTY,%d,%d,%d,%d*", OC1R, OC2R, OC3R, OC4R);
    char ch = ' ';
    for (int i = 0; i < size && message[i] != '\0'; i++){ 
        ch = message[i];
        push(ch, false);
    }
}

// INTERRUPT FUNCTIONS //
void __attribute__((__interrupt__, __auto_psv__)) _INT1Interrupt(){
    /*
     * Interrupt function for button E8 (INT1): Resets the interrupt flag, 
     * disables INT1 interrupt, enables Timer1 (T1IE) interrupt, resets T1IF flag,
     * clears Timer1 register, and starts Timer1.
     */ 
    IFS1bits.INT1IF = 0;    // Reset INT1 interrupt flag 
    IEC1bits.INT1IE = 0;    // Disable INT1 interrupt for button E8
    IEC0bits.T1IE = 1;      // Enable Timer1 (T1IE) interrupt
    IFS0bits.T1IF = 0;      // Reset Timer1 interrupt flag
    TMR1 = 0;               // Clear Timer1 'counter' register
    T1CONbits.TON = 1;      // Start Timer1
}

void __attribute__ ((__interrupt__, __auto_psv__)) _T1Interrupt(){
    /*
     * Timer1 (T1) interrupt function: Resets the Timer1 interrupt flag,
     * disables Timer1 interrupt (T1IE), enables INT1 interrupt for button E8,
     * and checks if button E8 is pressed. If it is pressed, it stops the motion.
     */ 
    IFS0bits.T1IF = 0;      // Reset Timer1 interrupt flag 
    IEC0bits.T1IE = 0;      // Disable Timer1 interrupt
    IFS1bits.INT1IF = 0;    // Reset INT1 interrupt flag
    IEC1bits.INT1IE = 1;    // Enable INT1 interrupt for button E8

    // Check if button E8 is already pressed
    if(PORTEbits.RE8 == 0){
        if (mainState == STATE_WAIT){
            mainState = STATE_MOTION;
        }
        else if (mainState == STATE_MOTION){
            mainState = STATE_WAIT;
        }
        // stop the timer3
        T3CONbits.TON = 0; 
        TMR3 = 0.0;
        counterBlink = 0;
        // turn off the lights
        lights_off();
    }
}

void __attribute__ ((__interrupt__, __auto_psv__)) _T3Interrupt(){
    /*
    * Timer3 (T3) interrupt function: Resets the Timer3 interrupt flag,
    * implements the variable 'counterBlink' because we cannot have a timer with a period of 1 second,
    * so we wait five times the interrupt period (200ms) to have a period of 1 second. 
    * After that, we blink the lights at 1Hz.
    */
    IFS0bits.T3IF = 0;      // Reset Timer3 interrupt flag
    TMR3 = 0.0;
    counterBlink += 1;
    if (counterBlink == 5 && mainState == STATE_WAIT){
        // blink the lights at 1Hz
        LATGbits.LATG9 = !LATGbits.LATG9;
        LATAbits.LATA0 = !LATAbits.LATA0;
        LATBbits.LATB8 = !LATBbits.LATB8;
        LATFbits.LATF1 = !LATFbits.LATF1;
        counterBlink = 0;
        return;
    }
    else if (counterBlink == 5 && mainState == STATE_MOTION){
        if (rotationState == CLOCKWISEROTATION){
            // blink the right side lights at 1Hz
            LATFbits.LATF1 = !LATFbits.LATF1;
            counterBlink = 0;
        }
        else if (rotationState == COUNTERCLOCKWISEROTATION){
            // blink the left side lights at 1Hz
            LATBbits.LATB8 = !LATBbits.LATB8;
            counterBlink = 0;
        }
        return;
    }
    T3CONbits.TON = 1; // start the timer
}

void __attribute__ ((__interrupt__, __auto_psv__)) _T4Interrupt(){
    /*
    * Timer4 (T4) interrupt function: Resets the Timer4 interrupt flag,
    * force the flagFrequency to be 1, and starts the timer.
    * This timer is used to send the data to the UART every 100ms.
    */
    IFS1bits.T4IF = 0;      // Reset Timer4 interrupt flag
    TMR4 = 0.0;
    flagFrequency = 1;
    T4CONbits.TON = 1;      // start the Timer4
}

void __attribute__((__interrupt__, __auto_psv__)) _U2RXInterrupt
    () {
    /*
     * Interrupt function of the UART2: when the buffer is full, execute it.
     * Read the buffer and push the data inside the circular buffer
     */ 
    IFS1bits.U2RXIF = 0;                          // Reset the flag
    if(U2STAbits.URXDA == 1){                     // If there are data to be read
        IEC1bits.U2RXIE = 0;                      // Disable interrupt for UART2 reception
        char receivedData = U2RXREG;              // Read
        push(receivedData, true);                       // Push
        IEC1bits.U2RXIE = 1;                      // Enable interrupt for UART2 reception
    }    
}

void __attribute__((__interrupt__, __auto_psv__)) _INT2Interrupt(){
    /*
     * Interrupt function for button E9 (INT2): Resets the interrupt flag, 
     * disables INT2 interrupt, enables Timer5 (T5IE) interrupt, resets T1IF flag,
     * clears Timer5 register, and starts Timer5.
     * This button is used to change the rotation of the motors.
     */ 
    IFS1bits.INT2IF = 0;   
    IEC1bits.INT2IE = 0;    
    IEC1bits.T5IE = 1;      
    IFS1bits.T5IF = 0;      
    TMR5 = 0;               
    T5CONbits.TON = 1;      
}

void __attribute__ ((__interrupt__, __auto_psv__)) _T5Interrupt(){
    /*
     * Timer5 (T5) interrupt function: Resets the Timer5 interrupt flag,
     * disables Timer5 interrupt (T5IE), enables INT2 interrupt for button E9,
     * and checks if button E9 is pressed. If it is pressed, it changes the rotation.
     */ 
    IFS1bits.T5IF = 0;      // Reset Timer1 interrupt flag 
    IEC1bits.T5IE = 0;      // Disable Timer1 interrupt
    IFS1bits.INT2IF = 0;    // Reset INT1 interrupt flag
    IEC1bits.INT2IE = 1;    // Enable INT1 interrupt for button E9

    // Check if button E9 is already pressed
    if(PORTEbits.RE9 == 0){
        if (rotationState == CLOCKWISEROTATION){
            rotationState = COUNTERCLOCKWISEROTATION;
        }
        else if (rotationState == COUNTERCLOCKWISEROTATION){
            rotationState = CLOCKWISEROTATION;
        }
        // stop the timer5
        T5CONbits.TON = 0; 
        TMR5 = 0.0;
        counterBlink = 0;
        // turn off the lights
        lights_off();
    }
}

// PROFESSOR'S CODE // 
int parse_byte(parser_state* ps, char byte) {
    switch (ps->state) {
        case STATE_DOLLAR:
            if (byte == '$') {
                ps->state = STATE_TYPE;
                ps->index_type = 0;
            }
            break; 
        case STATE_TYPE:
            if (byte == ',') {
                ps->state = STATE_PAYLOAD;
                ps->msg_type[ps->index_type] = '\0';
                ps->index_payload = 0; // initialize properly the index
            } else if (ps->index_type == 6) { // error! 
                ps->state = STATE_DOLLAR;
                ps->index_type = 0;
			} else if (byte == '*') {
				ps->state = STATE_DOLLAR; // get ready for a new message
                ps->msg_type[ps->index_type] = '\0';
				ps->msg_payload[0] = '\0'; // no payload
                return NEW_MESSAGE;
            } else {
                ps->msg_type[ps->index_type] = byte; // ok!
                ps->index_type++; // increment for the next time;
            }
            break;
        case STATE_PAYLOAD:
            if (byte == '*') {
                ps->state = STATE_DOLLAR; // get ready for a new message
                ps->msg_payload[ps->index_payload] = '\0';
                return NEW_MESSAGE;
            } else if (ps->index_payload == 100) { // error
                ps->state = STATE_DOLLAR;
                ps->index_payload = 0;
            } else {
                ps->msg_payload[ps->index_payload] = byte; // ok!
                ps->index_payload++; // increment for the next time;
            } 
            break;
    }
    return NO_MESSAGE;
}

int extract_integer(const char* str) { 
  int i = 0, number = 0, sign = 1;

  if (str[i] == '-') {
    sign = -1;
    i++;
  }
  else if (str[i] == '+') {
    sign = 1;
    i++;
  }
  while (str[i] != ',' && str[i] != '\0'){
    number = number * 10;
    number += str[i] - '0';
    i++;
  }
  return sign * number;
}

int next_value(const char* msg, int i) {
  while (msg[i] != ',' && msg[i] != '\0') {
    i++;
  }
  if (msg[i] == ',') {
    i++;
  }
  return i;
}

void parse_pcth(const char* msg){
  int i = 0;
  threshold.minth = extract_integer(msg);
  i = next_value(msg, i);
  threshold.maxth = extract_integer(msg + i);
}

// CIRCULAR BUFFER FUNCTIONS //
void push(char receivedChar, bool bufferSelection) {
    /*
     * Pushes characters received from UART into the circular buffer.
     * As we have two circular buffers, we have to select which one we want to use with the boolean 'bufferSelection'.
     * If the RECEIVED buffer is full, we don't push the character.
     * If the TRANSMISSION buffer is full, we overwrite the oldest data.
     */
    if (bufferSelection == true){
        if (cb_reception.bufferLength == SIZE_OF_BUFFER_RC) {
            return;
        } 
        else {
            cb_reception.buffer[cb_reception.writeIndex] = receivedChar;
            cb_reception.bufferLength++;
            cb_reception.writeIndex++;
            // Wrap around if the writeIndex exceeds the buffer size
            if (cb_reception.writeIndex == SIZE_OF_BUFFER_RC) {
                cb_reception.writeIndex = 0;
            }
        }
    }
    else if (bufferSelection == false){ 
        if (cb_transmission.bufferLength == SIZE_OF_BUFFER_TR) {
            // if the buffer is full, overwrite the oldest data
            cb_transmission.bufferLength--;
            cb_transmission.readIndex++;
            // Wrap around if the readIndex exceeds the buffer size
            if(cb_transmission.readIndex == SIZE_OF_BUFFER_TR){
                cb_transmission.readIndex = 0;
            }
        }
        cb_transmission.buffer[cb_transmission.writeIndex] = receivedChar;
        cb_transmission.bufferLength++;
        cb_transmission.writeIndex++;
        // Wrap around if the writeIndex exceeds the buffer size
        if (cb_transmission.writeIndex == SIZE_OF_BUFFER_TR) {
            cb_transmission.writeIndex = 0;
        }
    }

}

void pull(bool bufferSelection) {
    /*
     * The RECEIVE buffer takes out all the characters stored in the circular buffer.
     * The TRANSMISSION buffer takes out only one character at call.
     * As we have two circular buffers, we have to select which one we want to use with the boolean 'bufferSelection'.
     * With the 'cb_reception' buffer, we parse the message (with 'parse_byte') and we acquire the payload (with 'parse_pcth') into threshold.minth and maxth.
     * With the 'cb_transmission' buffer, we send the data to the UART.
     */
    if (bufferSelection == true){
        while (cb_reception.bufferLength > 0) {
            if (cb_reception.bufferLength == 0) {
                return;
            } 
            else {
                IEC1bits.U2RXIE = 0; // Disable UART2 Receiver Interrupt to avoid problems with shared variables  
                char receivedChar = cb_reception.buffer[cb_reception.readIndex];
                cb_reception.bufferLength--;
                cb_reception.readIndex++;
                // Wrap around if the readIndex exceeds the buffer size
                if (cb_reception.readIndex == SIZE_OF_BUFFER_RC) {
                    cb_reception.readIndex = 0;
                }
                int msg_result = parse_byte(&ps, receivedChar); // Parse the byte to get the message type
                IEC1bits.U2RXIE = 1; // Enable UART2 Receiver Interrupt
                if (msg_result == NEW_MESSAGE) { // If we have a new message, we acquire the payload into sdata.minth and maxth
                    if (ps.msg_type[0] == 'P' && ps.msg_type[1] == 'C' && ps.msg_type[2] == 'T' && ps.msg_type[3] == 'H' && ps.msg_type[4] == '\0'){
                        parse_pcth(ps.msg_payload);
                    }
                }
            }
        }
    }
    else if (bufferSelection == false){ 
        if (cb_transmission.bufferLength <= 0) {
            return;
        } 
        else {
            //IEC1bits.U2RXIE = 0; // Disable UART2 Receiver Interrupt to avoid problems with shared variables  
            char receivedChar = cb_transmission.buffer[cb_transmission.readIndex];
            cb_transmission.bufferLength--;
            cb_transmission.readIndex++;
            // Wrap around if the readIndex exceeds the buffer size
            if (cb_transmission.readIndex == SIZE_OF_BUFFER_TR) {
                cb_transmission.readIndex = 0;
            }
            //IEC1bits.U2RXIE = 1; // Enable UART2 Receiver Interrupt
            U2TXREG = receivedChar;
        }
    }
}

// MAIN FUNCTION //
int main(void){
    ANSELA=ANSELB=ANSELC=ANSELD=ANSELE=ANSELG=0x0000; //MANDATORY 

    // initializations
    leds_initialization();
    bottoms_initialization();
    PWM_initialization();
    ADC_initialization();  
    buffers_initialization(); 

    // Parser state initialization:
    ps.state = STATE_DOLLAR; 
    ps.index_type = 0; 
    ps.index_payload = 0; 
    
    // UART2 initialization
    U2MODE = 0; // Clear UART2 mode register
    U2STA = 0; // Clear UART2 status register
    U2BRG = 157; // 28800 baud rate
    U2MODEbits.UARTEN = 1; // Enable UART2
    U2STAbits.UTXEN = 1; // Enable UART2 transmission
    U2STAbits.URXISEL = 3; // Interrup when the buffer is full
    IEC1bits.U2RXIE = 1; // Enable UART2 interrupt
    U2STAbits.UTXISEL0 = 0; // Interrupt when the buffer is empty
    U2STAbits.UTXISEL1 = 0; // Interrupt when the buffer is empty
    RPOR0bits.RP64R = 0x03; // Set pin RP64 as U2TX
    RPINR19bits.U2RXR = 0x4B; // Set pin RP75 as U2RX

    // Set the timer for the main at 1kHz (1ms)
    tmr_setup_period(TIMER2, 1); 
    // Set the timer for the blink at 1Hz (200ms x 5 = 1s)
    tmr_setup_period(TIMER3, 200); 
    IEC0bits.T3IE = 1; // Enable Timer3 (T3IE) interrupt
    // set timer4 at 10 Hz (100ms)
    tmr_setup_period(TIMER4, 100); 
    IEC1bits.T4IE = 1;    // Enable Timer4 (T4IE) interrupt
    IFS1bits.T4IF = 0;    // Reset Timer4 interrupt flag
    T4CONbits.TON = 1;    // Start Timer4
    
    // Set the count used to send the data to the UART at different frequencies (10Hz and 1Hz)
    int count = 0;
    // Variable to acquire the distance from the ADC sensor
    float distance = 0.0;
    // Threshold data initialization:
    threshold.minth = 15; 
    threshold.maxth = 38;
    
    while (1)
    {
        /*
        * Acquire the distance from the ADC sensor we take it out from the StateSelection because we want to measure the battery voltage and the distance 
        * even if the buggy is not moving.
        */
        distance = acquisition_ADC();
        // State selection  
        if (mainState == STATE_WAIT){
            stop_motion();  
            // blink the lights at 1Hz
            if (counterBlink == 0){
                T3CONbits.TON = 1;
            }
        }
        else if (mainState == STATE_MOTION){
            // Move the buggy
            motor_pwm(distance);
        }
        // Check if there are characters in UART2 buffer
        if (U2STAbits.URXDA == 1) {   
            IEC1bits.U2RXIE = 0;         // Disable interrupt for UART2 reception
            char receivedData = U2RXREG; // Read from UART2
            push(receivedData, true);   
            IEC1bits.U2RXIE = 1;         // Enable UART2 reception interrupt
        }
        pull(true);  // At each cycle we "clean" the buffer "cb_reception" 
        /*
        * Send the data to the UART at different frequencies (10Hz and 1Hz), the flagFrequency is set to 1 in the Timer4 interrupt function every 100ms.
        * So, we send the distance and the duty cycle every 100ms.
        * We send the battery voltage every 1s, after 10 flagFrequency attivations (by the Timer4 interrupt function).
        */
        if(flagFrequency == 1){ //10Hz - 100ms Tasks
            count++;
            int distance_cm = inverse_threshold_calculation(distance);
            send_distance(&distance_cm);
            send_duty_cycle();           
            flagFrequency = 0; // Re-set the flag
            if (count % 10 == 0){ //1Hz - 1s Tasks
                send_battery_voltage();
                count = 0;
            }
        }
        // If the UART2 buffer is not full and the TRANSMISSION buffer is not empty, send the data to the UART
        if (U2STAbits.UTXBF == 0 && cb_transmission.bufferLength > 0){
            pull(false);
        }
        // Wait the control loop frequency
        IFS0bits.T2IF = 0;        
        T2CONbits.TON = 1;  
        tmr_wait_period(TIMER2);
    }
    return 0;
}